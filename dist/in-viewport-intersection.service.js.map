{"version":3,"file":"in-viewport-intersection.service.js","sourceRoot":"","sources":["../src/in-viewport-intersection.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,sCAAyD;IACzD,6DAA0D;IAG1D,IAAa,6BAA6B;QAAS,iDAAiB;QAKlE;YAAA,YACE,iBAAO,SAUR;YARC,KAAI,CAAC,QAAQ,GAAG,IAAI,mBAAY,EAAE,CAAC;YAEnC,KAAI,CAAC,QAAQ,GAAG,IAAI,oBAAoB,CACtC,UAAC,OAAmB,EAAE,QAAa,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAvB,CAAuB,EAC/D;gBACE,SAAS,EAAE,uBAAuB,EAAE;aACrC,CACF,CAAC;;QACJ,CAAC;QAED,iDAAS,GAAT,UAAU,OAAmB;YAC3B,IAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,UAAC,KAAK,IAAK,OAAA,CAAC;gBACrC,IAAI,EAAE,MAAM;gBACZ,MAAM,EAAE,KAAK,CAAC,MAAM;aACrB,CAAC,EAHoC,CAGpC,CAAC,CAAC;YAEJ,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC7B,CAAC;QAED,iDAAS,GAAT,UAAU,MAAmB,EAAE,WAAkC;YAC/D,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAChC,CAAC;QAED,oDAAY,GAAZ,UAAa,MAAmB,EAAE,WAAkC;YAClE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAClC,CAAC;QACH,oCAAC;IAAD,CAAC,AAlCD,CAAmD,uCAAiB,GAkCnE;IAlCY,6BAA6B;QADzC,iBAAU,EAAE;;OACA,6BAA6B,CAkCzC;IAlCY,sEAA6B;IAoC1C;QACE,IAAM,SAAS,GAAkB,EAAE,CAAC;QACpC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;YAC9B,SAAS,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;QAC1B,CAAC;QACD,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC","sourcesContent":["import { EventEmitter, Injectable } from \"@angular/core\";\nimport { InViewportService } from \"./in-viewport.service\";\n\n@Injectable()\nexport class InViewportIntersectionService extends InViewportService {\n  private observer: any;\n\n  public trigger$: EventEmitter<any>;\n\n  constructor() {\n    super();\n\n    this.trigger$ = new EventEmitter();\n\n    this.observer = new IntersectionObserver(\n      (entries: Array<any>, observer: any) => this.onChanges(entries),\n      {\n        threshold: generateThresholdHelper()\n      }\n    );\n  }\n\n  onChanges(entries: Array<any>) {\n    const result = entries.map((entry) => ({\n      root: window,\n      target: entry.target\n    }));\n\n    this.trigger$.emit(result);\n  }\n\n  addTarget(target: HTMLElement, rootElement?: HTMLElement | Window) {\n    this.observer.observe(target);\n  }\n\n  removeTarget(target: HTMLElement, rootElement?: HTMLElement | Window) {\n    this.observer.unobserve(target);\n  }\n}\n\nfunction generateThresholdHelper() {\n  const threshold: Array<number> = [];\n  for (let i = 0; i <= 100; i++) {\n    threshold.push(i / 100);\n  }\n  return threshold;\n}\n"]}