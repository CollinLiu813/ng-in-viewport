{"version":3,"file":"in-viewport.directive.js","sourceRoot":"","sources":["../src/in-viewport.directive.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAiB,SAAS,EAAE,UAAU,EAAE,YAAY,EAAE,KAAK,EAAa,MAAM,EAAE,MAAM,eAAe,CAAC;AAC7G,OAAO,EAAE,gBAAgB,EAAE,MAAM,4BAA4B,CAAC;AAC9D,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAK1D,IAAa,mBAAmB,GAAhC;IAME,YAAmB,UAAsB,EACrB,iBAAoC;QADrC,eAAU,GAAV,UAAU,CAAY;QACrB,sBAAiB,GAAjB,iBAAiB,CAAmB;QACtD,IAAI,CAAC,MAAM,GAAG,IAAI,gBAAgB,EAAE,CAAC;QACrC,IAAI,CAAC,OAAO,GAAG,IAAI,YAAY,EAAE,CAAC;IACpC,CAAC;IAGD,IAAI,YAAY,CAAC,KAAU;QACzB,EAAE,CAAC,CAAC,KAAK,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,iBAAiB,CAAC,CAAC,CAAC;YACzE,EAAE,CAAC,CAAC,KAAK,CAAC,WAAW,YAAY,OAAO,CAAC,CAAC,CAAC;gBACzC,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,KAAK,CAAC,WAAW,CAAC;YAC9C,CAAC;YACD,EAAE,CAAC,CAAC,SAAS,IAAI,KAAK,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;YACtC,CAAC;YACD,EAAE,CAAC,CAAC,WAAW,IAAI,KAAK,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,KAAK,CAAC,SAAS,CAAC;YAC5C,CAAC;QACH,CAAC;IACH,CAAC;IAED,eAAe;QACb,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,KAAgC,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;QACnG,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAC3F,CAAC;IAED,WAAW;QACT,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;IACrE,CAAC;IAED,KAAK,CAAC,KAAgC;QACpC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC;YACnD,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,iBAAiB,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,iBAAiB,KAAK,CAAC,CAAC,CAAC;YAEpG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;gBAChB,MAAM,EAAE,KAAK,CAAC,MAAM;gBACpB,KAAK;aACN,CAAC,CAAA;QACJ,CAAC;IACH,CAAC;CACF,CAAA;AA1CC;IADC,MAAM,CAAC,kBAAkB,CAAC;8BACX,YAAY;oDAAM;AASlC;IADC,KAAK,CAAC,mBAAmB,CAAC;;;uDAa1B;AAzBU,mBAAmB;IAH/B,SAAS,CAAC;QACT,QAAQ,EAAE,6BAA6B;KACxC,CAAC;qCAO+B,UAAU;QACF,iBAAiB;GAP7C,mBAAmB,CA8C/B;SA9CY,mBAAmB","sourcesContent":["import { AfterViewInit, Directive, ElementRef, EventEmitter, Input, OnDestroy, Output } from \"@angular/core\";\nimport { InViewportConfig } from \"./in-viewport-config.class\";\nimport { InViewportService } from \"./in-viewport.service\";\n\n@Directive({\n  selector: '[in-viewport], [inViewport]'\n})\nexport class InViewportDirective implements AfterViewInit, OnDestroy {\n  private config: InViewportConfig;\n\n  @Output('inViewportAction')\n  public action$: EventEmitter<any>;\n\n  constructor(public elementRef: ElementRef,\n              private inViewportService: InViewportService) {\n    this.config = new InViewportConfig();\n    this.action$ = new EventEmitter();\n  }\n\n  @Input('inViewportOptions')\n  set updateConfig(value: any) {\n    if (value && Object.prototype.toString.call(value) === '[object Object]') {\n      if (value.rootElement instanceof Element) {\n        this.config.rootElement = value.rootElement;\n      }\n      if ('partial' in value) {\n        this.config.partial = value.partial;\n      }\n      if ('direction' in value) {\n        this.config.rootElement = value.direction;\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    this.inViewportService.trigger$.subscribe((entry: IntersectionObserverEntry) => this.check(entry));\n    this.inViewportService.addTarget(this.elementRef.nativeElement, this.config.rootElement);\n  }\n\n  ngOnDestroy() {\n    this.inViewportService.removeTarget(this.elementRef.nativeElement);\n  }\n\n  check(entry: IntersectionObserverEntry) {\n    if (entry.target === this.elementRef.nativeElement) {\n      const value = this.config.partial ? (entry.intersectionRatio > 0) : (entry.intersectionRatio === 1);\n\n      this.action$.emit({\n        target: entry.target,\n        value\n      })\n    }\n  }\n}\n"]}