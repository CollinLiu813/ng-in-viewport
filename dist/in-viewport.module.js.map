{"version":3,"file":"in-viewport.module.js","sourceRoot":"","sources":["../src/in-viewport.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;IAAA,sCAA4F;IAC5F,2EAAuE;IACvE,uFAAmF;IACnF,iEAA8D;IAC9D,6DAA0D;IAE1D,IAAY,oBAGX;IAHD,WAAY,oBAAoB;QAC9B,mEAAM,CAAA;QACN,+EAAY,CAAA;IACd,CAAC,EAHW,oBAAoB,GAApB,4BAAoB,KAApB,4BAAoB,QAG/B;IAEY,QAAA,kBAAkB,GAAG,IAAI,kBAAW,CAAC,oBAAoB,CAAC,CAAC;IAExE,IAAM,QAAQ,GAAyB,CAAC,MAAM,IAAI,sBAAsB,IAAI,MAAM,CAAC;UAC/E,oBAAoB,CAAC,YAAY;UACjC,oBAAoB,CAAC,MAAM,CAAC;IAEhC,IAAM,wBAAwB,GAAoB;QAChD,OAAO,EAAE,uCAAiB;QAC1B,UAAU,EAAE;YACV,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACjB,KAAK,oBAAoB,CAAC,YAAY;oBACpC,MAAM,CAAC,IAAI,gEAA6B,EAAE,CAAC;gBAC7C;oBACE,MAAM,CAAC,IAAI,oDAAuB,EAAE,CAAC;YACzC,CAAC;QACH,CAAC;KACF,CAAC;IAWF,IAAa,gBAAgB;QAgB3B,0BAAoB,iBAAoC;YAApC,sBAAiB,GAAjB,iBAAiB,CAAmB;QAAG,CAAC;QAfrD,wBAAO,GAAd;YACE,MAAM,CAAC;gBACL,QAAQ,EAAE,kBAAgB;gBAC1B,SAAS,EAAE;oBACT;wBACE,OAAO,EAAE,0BAAkB;wBAC3B,QAAQ,EAAE,QAAQ;qBACnB;oBACD,wBAAwB;oBACxB,oDAAuB;oBACvB,gEAA6B;iBAC9B;aACF,CAAC;QACJ,CAAC;QAGH,uBAAC;IAAD,CAAC,AAjBD,IAiBC;IAjBY,gBAAgB;QAT5B,eAAQ,CAAC;YACR,OAAO,EAAE,EAAE;YACX,YAAY,EAAE;gBACZ,2CAAmB;aACpB;YACD,OAAO,EAAE;gBACP,2CAAmB;aACpB;SACF,CAAC;yCAiBuC,uCAAiB;OAhB7C,gBAAgB,CAiB5B;IAjBY,4CAAgB","sourcesContent":["import { FactoryProvider, ModuleWithProviders, NgModule, OpaqueToken } from \"@angular/core\";\nimport { InViewportEventsService } from \"./in-viewport-events.service\";\nimport { InViewportIntersectionService } from \"./in-viewport-intersection.service\";\nimport { InViewportDirective } from \"./in-viewport.directive\";\nimport { InViewportService } from \"./in-viewport.service\";\n\nexport enum InViewportStrategies {\n  Events,\n  Intersection\n}\n\nexport const InViewportStrategy = new OpaqueToken('InViewportStrategy');\n\nconst strategy: InViewportStrategies = (window && 'IntersectionObserver' in window)\n  ? InViewportStrategies.Intersection\n  : InViewportStrategies.Events;\n\nconst InViewportServiceFactory: FactoryProvider = {\n  provide: InViewportService,\n  useFactory: () => {\n    switch (strategy) {\n      case InViewportStrategies.Intersection:\n        return new InViewportIntersectionService();\n      default:\n        return new InViewportEventsService();\n    }\n  }\n};\n\n@NgModule({\n  imports: [],\n  declarations: [\n    InViewportDirective\n  ],\n  exports: [\n    InViewportDirective\n  ]\n})\nexport class InViewportModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: InViewportModule,\n      providers: [\n        {\n          provide: InViewportStrategy,\n          useValue: strategy\n        },\n        InViewportServiceFactory,\n        InViewportEventsService,\n        InViewportIntersectionService\n      ]\n    };\n  }\n\n  constructor(private inViewportService: InViewportService) {}\n}\n"]}